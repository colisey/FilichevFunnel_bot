const token =
  process.env.TELEGRAM_TOKEN ||
  "5760738946:AAGNz2M5GLqF3eX8r41HCUMs-wHmgyjafVA";
const TelegramApi = require("node-telegram-bot-api");
const bot = new TelegramApi(token, { polling: true });
const sequelize = require("./db");
const UserModel = require("./models");

const chats = {};
const webAppUrl = "https://aesthetic-granita-6e61e0.netlify.app/";

// const { gameOptions } = require("./options");

const start = async () => {
  try {
    await sequelize.authenticate();
    await sequelize.sync();
  } catch (error) {
    console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ —Å–ª–æ–º–∞–ª–æ—Å—å = ", error);
  }

  bot.setMyCommands([
    { command: "/start", description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
    { command: "/form", description: "–ü—Ä–∏–º–µ—Ä –§–æ—Ä–º—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö" },
    { command: "/shop", description: "–ü—Ä–∏–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞" },
    { command: "/basket", description: "–ü—Ä–∏–º–µ—Ä –∫–æ—Ä–∑–∏–Ω—ã –º–∞–≥–∞–∑–∏–Ω–∞" },
    { command: "/gallery", description: "–ü—Ä–∏–º–µ—Ä –≥–∞–ª–ª–µ—Ä–µ–∏" },
    { command: "/cases", description: "–ü—Ä–∏–º–µ—Ä –ö–µ–π—Å–æ–≤" },
    { command: "/contacts", description: "–ö–æ–Ω—Ç–∞–∫—Ç—ã" },
    // { command: "/info", description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
    // { command: "/game", description: "–ü–æ–∏—Ç–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?" },
  ]);

  bot.on("message", async (msg) => {
    const text = msg.text;
    const chatId = msg.chat.id;
    const UserId = msg.from.id;
    const images = await bot.getUserProfilePhotos(UserId);
    const imgSrc = images.photos[0][0].file_id;
    // const img = <img src=`${imgSrc}` /> ;

    try {
      switch (text) {
        case "/start":
          const url = "https://blog.altuninvv.ru/apple-touch-icon.png";
          const caption = "–≠—Ç–æ –ø–æ–¥–ø–∏—Å—å –∫ –Ω–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ!";

          // const link = url+'/n'+caption;

          const opts = {
            reply_to_message_id: msg.message_id,
            reply_markup: {
              keyboard: [
                
                [
                  {
                    text: "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω",
                    web_app: { url: webAppUrl + "shop" },
                  },
                  {
                    text: "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –ö–æ—Ä–∑–∏–Ω—É",
                    web_app: { url: webAppUrl + "basket" },
                  },
                  {
                    text: "ü™™ –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É",
                    web_app: { url: webAppUrl + "form" },
                  },
                ],
                [
                  {
                    text: "üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –ì–∞–ª–ª–µ—Ä–µ—é",
                    web_app: { url: webAppUrl+'gallery' },
                  },
                  {
                    text: "üõí –ü—Å–º–æ—Ç—Ä–µ—Ç—å –∫–µ–π—Å—ã",
                    web_app: { url: webAppUrl + "cases" },
                  },
                  {
                    text: "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                    web_app: { url: webAppUrl + "contacts" },
                  },
                ],
              ],
              resize_keyboard: true,
            },
            parse_mode: "HTML",
            // photo: [imgSrc, 30, 30]
          };
          await bot.sendMessage(chatId, caption, opts);
          // await bot.sendSticker(
          //   chatId,
          //   `https://tlgrm.ru/_/stickers/ef5/8e1/ef58e15f-94a2-3d56-a365-ca06e1339d08/7.webp`
          // );
          if (imgSrc) {
            await bot.sendPhoto(chatId, imgSrc, {
              caption: "Lovely kittens 001",
              parse_mode: "HTML",
            });
          }
          // bot.sendPhoto(chat_id,path_to_photo,{width:32px, height:32px})
          // console.log('images',images.photos[0][0].file_id);

          // await UserModel.create({ chatId });
          break;
        case "/form":
          await bot.sendMessage(
            chatId,
            `–ù–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞, –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üëáüëáüëá`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É",
                      web_app: { url: webAppUrl + "form" },
                    },
                  ],
                ],
              },
            }
          );

          break;

        case "/shop":
          await bot.sendMessage(chatId, `–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–í –º–∞–≥–∞–∑–∏–Ω",
                    web_app: { url: webAppUrl },
                  },
                ],
              ],
            },
          });
          break;
        case "/basket":
          await bot.sendMessage(chatId, `–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–í –º–∞–≥–∞–∑–∏–Ω",
                    web_app: { url: webAppUrl + "basket" },
                  },
                ],
              ],
            },
          });
          break;
        case "/gallery":
          await bot.sendMessage(chatId, `–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–í –º–∞–≥–∞–∑–∏–Ω",
                    web_app: { url: webAppUrl + "gallery" },
                  },
                ],
              ],
            },
          });
          break;
        case "/cases":
          await bot.sendMessage(chatId, `–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–í –º–∞–≥–∞–∑–∏–Ω",
                    web_app: { url: webAppUrl + "cases" },
                  },
                ],
              ],
            },
          });
          break;
        case "/contacts":
          await bot.sendMessage(chatId, `–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–í –º–∞–≥–∞–∑–∏–Ω",
                    web_app: { url: webAppUrl + "contacts" },
                  },
                ],
              ],
            },
          });
          break;

        // case "/info":
        //   // const user = await UserModel.findOne({ chatId });
        //   await bot.sendMessage(
        //     chatId,
        //     `–ù–µ–º–Ω–æ–≥–æ –æ —Ç–µ–±–µ ${msg.chat.first_name} ${msg.chat.last_name}, –≤ –∏—Ç–æ–≥–µ —É —Ç–µ–±—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.right} –∏ ${user.wrong} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö`
        //   );
        //   break;
        // case "/game":
        //   await bot.sendSticker(
        //     chatId,
        //     `https://tlgrm.ru/_/stickers/c8f/100/c8f1006e-f329-430f-af5c-d2fb68819d44/1.webp`
        //   );
        //   await bot.sendMessage(chatId, `–ü–æ–∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?`);
        //   const randomNumber = Math.floor(Math.random() * 10);

        //   chats[chatId] = randomNumber;
        //   await bot.sendMessage(chatId, `–û—Ç–≥–∞–¥—ã–≤–∞–π`, gameOptions);

        //   break;

        default:
          await bot.sendMessage(chatId, `–¢—ã –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ ${text}`);
          break;
      }

      if (msg?.web_app_data?.data) {
        const data = JSON.parse(msg?.web_app_data?.data);

        await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å`);
        await bot.sendMessage(chatId, `–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ ${data.country}`);
        await bot.sendMessage(chatId, `–í–∞—à–∞ street ${data.street}`);

        setTimeout(async () => {
          await bot.sendMessage(chatId, `–ú—ã —Å–ª–µ–¥–∏–º –∑–∞ –≤–∞–º–∏ :)`);
        }, 3000);
      }
    } catch (e) {
      return bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞! 11 ${e}`);
    }
  });
};

bot.on("callback_query", async (msg) => {
  const data = msg.data;
  const chatId = msg.message.chat.id;

  const user = await UserModel.findOne({ chatId });

  if (data == chats[chatId]) {
    user.right += 1;
    await bot.sendMessage(chatId, `–¢—ã —É–≥–∞–¥–∞–ª —Ü—ã—Ñ—Ä–∞ –±—ã–ª–∞ ${chats[chatId]}`);
  } else {
    user.wrong += 1;
    await bot.sendMessage(chatId, `–¢—ã –ù–ï —É–≥–∞–¥–∞–ª —Ü—ã—Ñ—Ä–∞ –±—ã–ª–∞ ${chats[chatId]}`);
  }
  await user.save();

  // bot.sendMessage(chatId, `–¢—ã –≤—ã–±—Ä–∞–ª —Ü–∏—Ñ—Ä—É ${data}`);
  // console.log(msg);
});

start();
